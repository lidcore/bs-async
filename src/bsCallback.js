// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");

function $$return(x, cb) {
  return cb(null, x);
}

function fail(exn, cb) {
  return cb(exn, null);
}

function $pipe$pipe$great(current, catcher, cb) {
  return Curry._1(current, (function (err, ret) {
                if (err == null) {
                  return cb(err, ret);
                } else {
                  return Curry._2(catcher, err, cb);
                }
              }));
}

function $great$great(current, next, cb) {
  return Curry._1(current, (function (err, ret) {
                if (err == null) {
                  try {
                    return Curry._2(next, ret, cb);
                  }
                  catch (raw_exn){
                    var exn = Js_exn.internalToOCamlException(raw_exn);
                    return cb(exn, null);
                  }
                } else {
                  return cb(err, null);
                }
              }));
}

function $unknown$great(current, ensure, cb) {
  return Curry._1(current, (function (err, ret) {
                return Curry._1(ensure, (function (_, _$1) {
                              return cb(err, ret);
                            }));
              }));
}

function discard(fn, cb) {
  return Curry._1(fn, (function (err, _) {
                return cb(err, /* () */0);
              }));
}

function itera($staropt$star, fn, a, cb) {
  var concurrency = $staropt$star ? $staropt$star[0] : 1;
  var total = a.length;
  var executed = [0];
  var $$process = function () {
    var match = a.pop();
    if (match !== undefined) {
      return Curry._2(fn, match, (function (err, _) {
                    if (err == null) {
                      setTimeout((function () {
                              return Curry._1($$process(/* () */0), /* () */0);
                            }), 0);
                      return /* () */0;
                    } else {
                      return cb(err, null);
                    }
                  }));
    } else {
      executed[0] = executed[0] + 1 | 0;
      if (executed[0] === total) {
        return cb(null, /* () */0);
      } else {
        return 0;
      }
    }
  };
  for(var _for = 1; _for <= concurrency; ++_for){
    setTimeout((function () {
            return Curry._1($$process(/* () */0), /* () */0);
          }), 0);
  }
  return /* () */0;
}

function iter(concurrency, fn, l) {
  var partial_arg = $$Array.of_list(l);
  return (function (param) {
      return itera(concurrency, fn, partial_arg, param);
    });
}

function fold_lefta(concurrency, fn, a, ba) {
  var cur = [a];
  var fn$1 = function (b) {
    var partial_arg = cur[0];
    return (function (param) {
        return $great$great(partial_arg, (function (a) {
                      cur[0] = Curry._2(fn, a, b);
                      return (function (param) {
                          return param(null, /* () */0);
                        });
                    }), param);
      });
  };
  return (function (param) {
      return $great$great((function (param) {
                    return itera(concurrency, fn$1, ba, param);
                  }), (function () {
                    return cur[0];
                  }), param);
    });
}

function fold_left(concurrency, fn, cur, l) {
  return fold_lefta(concurrency, fn, cur, $$Array.of_list(l));
}

function iteri(concurrency, fn, l) {
  var l$1 = List.mapi((function (idx, el) {
          return /* tuple */[
                  idx,
                  el
                ];
        }), l);
  var fn$1 = function (param) {
    return Curry._2(fn, param[0], param[1]);
  };
  return iter(concurrency, fn$1, l$1);
}

function mapa(concurrency, fn, a) {
  var ret = /* array */[];
  var map = function (v) {
    var partial_arg = Curry._1(fn, v);
    return (function (param) {
        return $great$great(partial_arg, (function (res) {
                      ret.push(res);
                      return (function (param) {
                          return param(null, /* () */0);
                        });
                    }), param);
      });
  };
  return (function (param) {
      return $great$great((function (param) {
                    return itera(concurrency, map, a, param);
                  }), (function () {
                    return (function (param) {
                        return param(null, ret);
                      });
                  }), param);
    });
}

function map(concurrency, fn, l) {
  var partial_arg = mapa(concurrency, fn, $$Array.of_list(l));
  return (function (param) {
      return $great$great(partial_arg, (function (ret) {
                    var partial_arg = $$Array.to_list(ret);
                    return (function (param) {
                        return param(null, partial_arg);
                      });
                  }), param);
    });
}

function mapi(concurrency, fn, l) {
  var l$1 = List.mapi((function (idx, el) {
          return /* tuple */[
                  idx,
                  el
                ];
        }), l);
  var fn$1 = function (param) {
    return Curry._2(fn, param[0], param[1]);
  };
  return map(concurrency, fn$1, l$1);
}

function execute($staropt$star, t, cb) {
  var exceptionHandler = $staropt$star ? $staropt$star[0] : (function (exn) {
        throw exn;
      });
  return Curry._1(t, (function (err, ret) {
                if (err == null) {
                  return Curry._1(cb, ret);
                } else {
                  return Curry._1(exceptionHandler, err);
                }
              }));
}

function finish(exceptionHandler, t) {
  return execute(exceptionHandler, t, (function () {
                return /* () */0;
              }));
}

function from_promise(p, cb) {
  var on_success = function (ret) {
    cb(null, ret);
    return Promise.resolve(ret);
  };
  var on_error = function (err) {
    cb(err, null);
    return p;
  };
  p.then(on_success).catch(on_error);
  return /* () */0;
}

function to_promise(fn) {
  return new Promise((function (resolve, reject) {
                return Curry._1(fn, (function (err, ret) {
                              if (err == null) {
                                return resolve(ret);
                              } else {
                                return reject(err);
                              }
                            }));
              }));
}

exports.$$return = $$return;
exports.fail = fail;
exports.$pipe$pipe$great = $pipe$pipe$great;
exports.$great$great = $great$great;
exports.$unknown$great = $unknown$great;
exports.discard = discard;
exports.fold_lefta = fold_lefta;
exports.fold_left = fold_left;
exports.itera = itera;
exports.iter = iter;
exports.iteri = iteri;
exports.mapa = mapa;
exports.map = map;
exports.mapi = mapi;
exports.execute = execute;
exports.finish = finish;
exports.from_promise = from_promise;
exports.to_promise = to_promise;
/* No side effect */
